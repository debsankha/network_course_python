Day 1
=====

Graph theory basics (From last year)	(1hr)		D
Networkx introduction (30 min)				D
Basic exercises	(1.5 hrs)				A

Semi-advance networkx talk	(30mins)		J
	Shortest path
	Cycles/loops
	Diameter
	Edge/node attributes

semi advanced exercise	(30mins)			J

Visualization talk	(30 mins)			J
	Layouts
	All corings
visualization exercise	(1.5 hrs)			A


Day 2
=====

Graph algorithms	1.5 hr				D
	Centrality
	Connectedness
	Degree distribution
	Minimum spanning tree
	Planarity
	.
	.
	.
	.

Exercises	1.5 hrs					A


Talk (graph tool)		15 mins			D
Talk on fun stuff		45 minutes		
	Movies
	Graphs that change
	Random walk

Indicated with * are topics they *need* to know about to solve the exercises. The rest of the points are just suggestions

*- How to create random/non-random graphs. What is special about the different graph-creation-models, which model does fit to which task.
*- What are connected components of a graph? How to access them via networkx?
*- What is a random walk? How to implement it?
*- limitations of networkx: speed issues, slow/costly algorithms

- simplified epidemic models (simulate a small emidemic to give them something to start from for the zombie apocalypse), maybe mention discrete vs. non-discrete implementations
- things networkx just cannot do -> methods to improve performance and functionality (graph-tool, boost, cython)
- creating animations with matplotlib to visualize dynamics in graphs
- Interactive graph manipulation using matplotlibs interactive mode
- interfacing with other programs/languages: formats to store graphs in (what is a .gpickle? introduce .gml)

Fun/Advanced Exercises+questions		2 hrs
	Random walk
	Changing graphs	(find realistic examples)

